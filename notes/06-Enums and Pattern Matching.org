#+TITLE: Enums and pattern matching

* Defining an Enum
#+begin_src rust
enum IpAddrKind {
    V4,
    V6,
}
#+end_src

** Using enum
#+begin_src rust
fn route(ip_kind: IpAddrKind) {}

fn main() {
    let four = IpAddrKind::V4;
    let six = IpAddrKind::V6;
}
#+end_src

+ in this way, enums can be a good way to represent types...
#+begin_src rust
struct IpAddr {
    kind: IpAddrKind,
    address: String,
}

let home = IpAddr {
    kind: IpAddrKind::V4,
    address: String::from("127.0.0.1"),
};

let loopback = IpAddr {
    kind: IpAddrKind::V6,
    address: String::from("::1"),
};
#+end_src

+ we can represent the same concept using only enums:
  - we attach data to each variant of the enum directly
#+begin_src rust
enum IpAddr {
    V4(String),
    V6(String),
}

let home = IpAddr::V4(String::from("127.0.0.1"));
let loopback = IpAddr::V6(String::from("::1"));
#+end_src

+ this is how the std lib defines ~IpAddr~
#+begin_src rust
struct Ipv4Addr {
    // --snip--
}

struct Ipv6Addr {
    // --snip--
}

enum IpAddr {
    V4(Ipv4Addr),
    V6(Ipv6Addr),
}
#+end_src

+ we can put any kind of data inside an enum variant
#+begin_src rust
enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}
#+end_src

** The ~Option~ Enum
#+begin_src rust
enum Option<T> {
    Some(T),
    None,
}

fn main() {
    let some_number = Some(5);
    let some_string = Some("a string");

    let absent_number: Option<i32> = None;
}
#+end_src
+ *rust doesn't have the =null= feature*
+ the ~Option~ type is used in many places because it encodes the very common scenario in which _a value could be something or it could be nothing_
+ expressing this concept in terms of the type system means _the compiler can check whether you've handled all the cases you should be handling_
+ [[file:///home/nasreddin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/share/doc/rust/html/std/option/enum.Option.html][check the docs]]

* The ~match~ control flow operator
#+begin_src rust
enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter,
}

fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => {
            println!("lucky penny!");
            1
        },
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    }
}
#+end_src
+ values go through each pattern in a ~match~ and executes the code assigned to the first pattern matched with the value

** Pattherns that bind to values
#+begin_src rust
#[derive(Debug)]
enum UsState {
    Alabama,
    Alaska,
    // --snip--
}

enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter(UsState),
}

fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => 1,
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter(state) => {
            println!("state quarter from {:?}!", state);
            25
        },
    }
}

fn main() {
    let coin = Coin::Quarter(UsState::Alabama);

    println!("{}", value_in_cents(coin));
}
#+end_src

#+RESULTS:
: state quarter from Alabama!
: 25

** Matching with ~Option<T>~
#+begin_src rust
fn plus_one(x: Option<i32>) -> Option<i32> {
    match x {
        None => None,
        Some(i) => Some(i + 1),
    }
}

let five = Some(5);
let six = plus_one(five);
let none = plus_one(None);
#+end_src

** Matches are exhaustive
+ when we use match, we *have to* handle all possible options with one arm of the match
+ ~_~ is used to indicate a default for all patters left
#+begin_src rust
let some_u8_value = 0u8;

match some_u8_value {
    1 => println!("one"),
    3 => println!("three"),
    5 => println!("five"),
    7 => println!("seven"),
    _ => (),
}
#+end_src

+ ~()~ is the unit value, so nothing will happen in the ~_~ case

* Concise control flow with ~if let~
#+begin_src rust
let some_u8_value = Some(0u8);
match some_u8_value {
    Some(3) => println!("three"),
    _ => (),
}
#+end_src

+ we could write this in another way using ~if let~
#+begin_src rust
let some_u8_value = Some(0u8);
if let Some(3) = some_u8_value {
    println!("three");
}
#+end_src
+ executes block if ~some_u8_value~ is =Some(3)=
+ we can even fit an else:
#+begin_src rust
let mut count = 0;
match coin {
    Coin::Quarter(state) => println!("state quarter from {:?}", state),
    _ => coutn += 1,
}

// can we done with
let mut count = 0;
if let Coin::Quarter(state) = coin {
    println!("state quarter from {:?}", state);
} else {
    count += 1;
}
#+end_src
