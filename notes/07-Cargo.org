#+title: Managing growign projects with cargo

* Intro
+ *Packages*: a cargo feature that lets you build, test, and share creates
+ *Creates*: a tree of modules that produces a library or executable
+ *Modules* and *use*: let you control the organization, scope, and privacy of paths
+ *Paths*: a way of naming an item, such as a struct, function, or module

* Packages and crates
+ a <<crate>> is a binary or a library
  - the /crate root/ is a source fiel taht the rust compiler starts from and makes up the root module of your crate
+ a <<package>> is one or more crates that profide a set of functionality
  - it contains a /Cargo.toml/ file that describes how to build those crates
  - /must/ contain 0 or 1 library crates
  - may contain as many binary crates as you'd like, but must contain at least 1 crate (binary or library)

** Crating a package
#+begin_src sh
cargo new my-project
#+end_src

#+RESULTS:
:   Created binary (application) `my-project` package

#+begin_src sh
cd my-project
tre -all
#+end_src

#+RESULTS:
: .
: ├── src
: │   └── main.rs
: └── Cargo.toml

#+begin_src
bat Cargo.toml
#+end_src
: ───────┬────────────────────────────────────────────────────────────────────
:        │ File: Cargo.toml
: ───────┼────────────────────────────────────────────────────────────────────
:    1   │ [package]
:    2   │ name = "my-project"
:    3   │ version = "0.1.0"
:    4   │ edition = "2018"
:    5   │
:    6   │ # See more keys and their definitions at https://doc.rust-lang.org/
:        │ cargo/reference/manifest.html
:    7   │
:    8   │ [dependencies]
: ───────┴────────────────────────────────────────────────────────────────────

+ we see no mention of /src/main.rs/ because cargo follows a convention that /src/main.rs/ is the /crate root/ of a binary crate with the same name as the package
+ likewise, if we have /src/lib.rs/ the package contains a library crate with the same name as the package, and /src/lib.rs/ is its /crate root/
+ a package can have multiple binary crates by placing files in the /src/bin/ directory
  - each file will be a separate binary crate
+ here, we have a project that only contains a /src/main.rs/ which means it only contains a binary crate named ~my-project~

* Defining modules to control scope and privacy
+ *modules* let us organize code within a crate into groups for readability and reuse
+ they also control the /privacy/ of items
  - /private/ code can't be used by outside code
  - /public/ code can be used by outside code

** Example
+ create a lib crate that provides the functionality for a restaurant
+ to structure our crate, we can organize the functions into nested modules
+ create a new lib named ~restaurant~
  - ~cargo new --lib restaurant~
+ put this into /src/lib.rs/
#+begin_src rust
mod front_of_house {
    mod hosting {
        fn add_to_waitlist() {}
        fn seat_at_table() {}
    }

    mod serving {
        fn take_order() {}
        fn serve_order() {}
        fn take_payment() {}
    }
}
#+end_src

+ a module starts with ~mod~
+ the contents of either /src/main.rs/ or /src/lib.rs/ form a module named /crate/ at the root of the crate's module structure, known as the module tree
#+begin_example
crate
 └── front_of_house
     ├── hosting
     │   ├── add_to_waitlist
     │   └── seat_at_table
     └── serving
         ├── take_order
         ├── serve_order
         └── take_payment
#+end_example

* Paths for referring to an item in the module tree
+ if we want to call a function, we need to know its path
  - /absolute path/ starts from a crate root by using a crate name or a literal ~crate~
  - /relative path/ starts from the current module and uses ~self~, ~super~, or an identifier in the current module

#+begin_src rust
mod front_of_house {
    mod hosting {
        fn add_to_waitlist() {}
    }
}

pub fn eat_at_restaurant() {
    // absolute path
    crate::front_of_house::hosting::add_to_waitlist();

    // relative path
    front_of_house::hosting::add_to_waitlist();
}
#+end_src

+ *ERROR* we can't do this!!!
  - ~hosting~ and ~add_to_waitlist()~ are both private
  - correcting:
#+begin_src rust
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

pub fn eat_at_restaurant() {
    // absolute path
    crate::front_of_house::hosting::add_to_waitlist();

    // relative path
    front_of_house::hosting::add_to_waitlist();
}
#+end_src

** Starting relative paths with ~super~
+ relative paths that begin at parent module
#+begin_src rust
fn serve_order() {}

mod back_of_house {
    fn fix_incorrect_order() {
        cook_order();
        super::serve_order();
    }

    fn cook_order() {}
}
#+end_src

** Making structs with enums public
+ if we use ~pub~ to designate /structs/, we make the struct public but not its fields
+ if we use ~pub~ to designate /enums/, its variants are also public

* Bring paths into scope with ~use~
#+begin_src rust
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use crate::front_of_house::hosting;

// or, using relative path
// use self::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}
#+end_src

** Creating idiomatic ~use~ paths
+ when bringing a function into scope, the idiomatic way is to do ~use~ with its parent module
+ when bringing a /struct/ or /enum/ into scope, the idiomatic way is to do ~use~ with the full path
#+begin_src rust
use std::collections::HashMap;

fn main() {
    let mut map = HashMap::new();
    map.insert(1, 2);
}
#+end_src

+ exception: 2 items with same name
#+begin_src rust
use std::fmt;
use std::io;

fn func1() -> fmt::Result {}

fn func2() -> io::Result<()> {}
#+end_src

** Providing new names with ~as~
#+begin_src rust
use std::fmt::Result;
use std::io::Result as IoResult;

fn func1() -> Result {}

fn func2() -> IoResult {}
#+end_src

** Rexporting names with ~pub use~
+ when we bring a name into scope with ~use~, the name available in the scope is private
+ to enable the code that calls our code to refer to that name as if it had been defined in that codes scope, we can use ~pub~ and ~use~

+ this is called /re-exporting/

#+begin_src rust
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

pub use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}
#+end_src

+ by using ~pub use~ external code can now call ~add_to_waitlist~ using ~hosting::add_to_waitlist~
+ if we hadn't used ~pub use~, ~eat_at_restaurant~ could call ~hosting::add_to_waitlist~ in its scope, but external code couldn't take advantage of this new path

+ with this, we can *write our own code with one structure but expose a different structure!!!*

** Using external packages
1. list packages in /Cargo.toml/
2. ~use~ brings items from their crates into scope

** Using nested paths to clean up large ~use~ lists
+ if we're using multiple items defined in the same create or same module, listing each item on its own line can take up a lot of space

+ using nested paths, we can turn:
#+begin_src rust
use std::cmp::Ordering;
use std::io;
#+end_src

+ into:
#+begin_src rust
use std::{cmp::Ordering, io};
#+end_src

+ or:
#+begin_src rust
use std::io;
use std::io::Write;
#+end_src

+ into:
#+begin_src rust
use std::io::{self, Write};
#+end_src

** The glob operator
+ if we want to bring *all* public items

#+begin_src rust
use std::collections::*;
#+end_src

* Separating modules into different files
+ let's use prev code as example

+ /src/lib.rs/
#+begin_src rust
mod front_of_house;

pub use crate::front_of_hosue::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}
#+end_src

+ /src/front_of_house.rs/
#+begin_src rust
pub mod hosting;
#+end_src

+ /src/front_of_house/hosting.rs/
#+begin_src rust
pub fn add_to_waitlist() {}
#+end_src
