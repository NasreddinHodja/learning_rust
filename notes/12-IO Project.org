#+TITLE: I/O Project

* Accepting CLI args
+ we are making ~minigrep~
  - will search a string inside a file
: cargo run [string] [file]

+ reading arg values
  - ~args~ function will panic if any arg is invalid unicode
  - if we need to accept invalid unicode, use ~args_os~
#+begin_src rust
use std::env;

fn main() {
    let args: Vec<String> = env::args().collect();
    println!("{:?}", args);
}
#+end_src

* Reading a file
#+begin_src rust
let contents = fs::read_to_string(file_name)
    .expect("something went wrong reading the file");
#+end_src

* Env vars
#+begin_src rust
use std::env;
// --snip--

impl Config {
    pub fn new(args: &[String]) -> Result<Config, &str> {
        if args.len() < 3 {
            return Err("not enough arguments");
        }

        let query = args[1].clone();
        let filename = args[2].clone();

        let case_sensitive = env::var("CASE_INSENSITIVE").is_err();

        Ok(Config {
            query,
            filename,
            case_sensitive,
        })
    }
}
#+end_src

* Printing errors to standard error
#+begin_src rust
fn main() {
    let args: Vec<String> = env::args().collect();
    let config = Config::new(&args).unwrap_or_else(|err| {
        eprintln!("Problem parsing arguments: {}", err);
        process::exit(1);
    });

    if let Err(e) = minigrep::run(config) {
        eprintln!("Application error: {}", e);
        process::exit(1);
    }
}
#+end_src
