#+TITLE: Error Handling

* Unrecoverable errors with ~panic!~
+ program prints a failure message, unwinds and cleans up the stack, then quits
+ you can do ~RUST_BACKTRACE=[number] cargo run~ to see the backtrace of a panic

* Recoverable errors with ~Result~
#+begin_src rust :exports both
enum Result<T, E> {
    Ok(T),
    Err(E),
}
#+end_src

+ matching on diff errors:
#+begin_src rust :exports both
use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let f = File::open("hello.txt");

    let f = match f {
        Ok(file) => file,
        Err(error) => match error.kind() {
            ErrorKind::NotFund => match File::create("hello.txt") {
                Ok(fc) => fc,
                Err(e) => panic!("problem creating the file: {:?}", e),
            },
            other_error => {
                panic!("problem opening the file: {:?}", other_error)
            }
        },
    };
}
#+end_src

+ a little peek at closures:
#+begin_src rust :exports both
use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let f = File::open("hello.txt").unwrap_or_else(|error| {
        if error.kind() == ErrorKind::NotFound {
            File::create("hello.txt").unwrap_or_else(|error| {
                panic!("prolem creating the file: {:?}", error);
            })
        } else {
            panic!("problem opening the file: {:?}", error);
        }
    });
}
#+end_src

+ ~unwrap~
  - if result is ~Ok(res)~, ret ~res~
  - else ~panic!~

+ ~expect~
  - lets us choose ~panic!~ message
#+begin_src rust :exports both
use std::fs::File;

fn main() {
    let f = File::open("hello.txt").unwrap();

    let f = File::open("hello.txt").expect("failed to open hello.txt");
}
#+end_src

** Propagating errors
+ instead of handling the error within function, ret error to calling code
#+begin_src rust :exports both
#![allow(unused)]
use std::fs::File;
use std::io;
use std::io::Read;

fn read_username_from_file() -> Result<String, io::Error> {
    let f = File::open("hello.txt");

    let mut f = match f {
        Ok(file) => file,
        Err(e) => return Err(e),
    };

    let mut s = String::new();

    match f.read_to_string(&mut s) {
        Ok(_) => Ok(s),
        Err(e) => Err(e),
    }
}
#+end_src

+ the ~?~ operator: (same functionality as above)
  - placed after a ~Result~ is defined to work in almost the same way as the ~match~ expression we defined before
  - if ~Result~ is ~Ok~, the value inside ~Ok~ will get returned from this expr and the program will continue
  - else, the ~Err~ will be returned from the whole function
  - can only be used in ~fn~ that returns ~Result~
#+begin_src rust :exports both
use std::fs::File;
use std::io;
use std::io::Read;

fn read_username_from_file() -> Result<String, io::Error> {
    // let mut f = File::open("hello.txt");
    // let mut s = String::new();
    // f.read_to_string(&mut s)?;
    // Ok(s)

    // or
    let mut s = String::new();
    File::open("hello.txt")?.read_to_string(&mut s)?;
    Ok(s)

    // or, simply
    // fs::read_to_string("hello.txt")
}
#+end_src

* When to ~!panic~
+ reimplementing guessing game
#+begin_src rust :exports both
pub struct Guess {
    value: i32,
}

impl Guess {
    pub fn new(value: i32) -> Guess {
        if value < 1 || value > 100 {
            panic!("Guess value must be between 1 and 100, got {}.", value);
        }

        Guess { value }
    }

    pub fn value(&self) -> i32 {
        self.value
    }
}
#+end_src
